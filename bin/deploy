#!/bin/bash

while getopts b:e: option; do
  case "${option}" in
    b)  bucket_name="rt-${OPTARG}";;
    e)  environment=${OPTARG};;
  esac
done

echo $bucket_name
echo $environment

region="$(aws configure get region)"
stack_name="serverless-image-resizing"
account_id="$(aws sts get-caller-identity --query Account --output text \
  | xargs echo -n | tr -d '\r')"

set -o xtrace

bucket_check=$(aws s3 ls "s3://$bucket_name" 2>&1)

if [ $? != 0 ]; then
  echo "1st"
  exists_check=$(echo $bucket_check | grep -c 'NoSuchBucket')
  access_disabled_check=$(echo $bucket_check | grep -c 'AllAccessDisabled')
  if [ $exists_check = 1 ]; then
    echo "Bucket does not exist, $bucket_name will be created."
    createbucket=true
  elif [ $access_disabled_check = 1 ]; then
    echo "WARN: Access to this bucket is disabled, verify ownership."
    createbucket=false
  else
    echo "ERR:"
    echo "$bucket_check"
    exit 1
  fi
else
  echo "Bucket exists"
  createbucket=false
fi

sed -e "s/REGION/${region}/g" -e "s/ACCOUNT_ID/${account_id}/g" -e "s/ENV/${environment}/g" \
  api-template.yaml > deploy/api.yaml

aws s3 mb "s3://temp-${stack_name}-${environment}" --profile=rtadmin

aws cloudformation package \
  --output-template-file=deploy/output.yaml \
  --template-file=image-resize.yaml \
  --s3-bucket="temp-${stack_name}-${environment}" \
  --profile=rtadmin \

aws cloudformation deploy \
  --template-file=deploy/output.yaml \
  --stack-name="${stack_name}-${environment}" \
  --capabilities=CAPABILITY_NAMED_IAM \
  --parameter-overrides bucket=${bucket_name}-${environment} stage=${environment} createbucket=${createbucket} \
  --profile=rtadmin

aws s3 rb --force "s3://temp-${stack_name}-${environment}" --profile=rtadmin

aws cloudformation describe-stacks \
  --stack-name "${stack_name}-${environment}" \
  --query Stacks[].Outputs \
  --output table \
  --profile=rtadmin